version: "3.5"
services:
  db:
    image: postgres:16.1-alpine
    hostname: db
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: rinha
    expose:
      - "5432"
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "1GB"
    volumes:
      - postgres-db:/var/lib/postgresql/data
      - ./scripts/postgres/:/docker-entrypoint-initdb.d/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 15s
      timeout: 25s
    command:
      [
        "postgres",
        "-c",
        "config_file=/docker-entrypoint-initdb.d/postgresql.conf",
      ]
    network_mode: "host"

  api1:
    image: sergio21/golang-rinha-2023-q3:0.0.1
    restart: always
    hostname: api1
    environment:
      - DB_HOST=localhost
      - DB_USER=postgres
      - DB_PWD=postgres
      - DB_NAME=rinha
      - DB_PORT=5432
      - HTTP_PORT=8080
      - WORKER_SIZE=10000
      - WORKER_BATCH_MAX_SIZE=10000
      - WORKER_MAX_WORKERS=4
    depends_on:
      db:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "0.4"
          memory: "0.75GB"
    network_mode: "host"

  api2:
    image: sergio21/golang-rinha-2023-q3:0.0.1
    restart: always
    hostname: api2
    environment:
      - DB_HOST=localhost
      - DB_USER=postgres
      - DB_PWD=postgres
      - DB_NAME=rinha
      - DB_PORT=5432
      - HTTP_PORT=8081
      - WORKER_SIZE=10000
      - WORKER_BATCH_MAX_SIZE=10000
      - WORKER_MAX_WORKERS=4
    depends_on:
      db:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "0.4"
          memory: "0.75GB"
    network_mode: "host"

  nginx:
    image: nginx
    hostname: api
    volumes:
      - ./scripts/nginx/:/etc/nginx/
    depends_on:
      - api1
      - api2
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: "0.5GB"
    network_mode: "host"

volumes:
  postgres-db:
